/* tslint:disable */
/* eslint-disable */
/**
 * 4차 프로젝트 6팀 March API
 * 6팀 March의 백엔드 API 명세서입니다.
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface NotificationDto
 */
export interface NotificationDto {
    /**
     * 
     * @type {number}
     * @memberof NotificationDto
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof NotificationDto
     */
    senderId?: number;
    /**
     * 
     * @type {number}
     * @memberof NotificationDto
     */
    receiverId?: number;
    /**
     * 
     * @type {string}
     * @memberof NotificationDto
     */
    type?: NotificationDtoTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationDto
     */
    message?: string;
    /**
     * 
     * @type {Date}
     * @memberof NotificationDto
     */
    createdAt?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof NotificationDto
     */
    read?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NotificationDto
     */
    deleted?: boolean;
}


/**
 * @export
 */
export const NotificationDtoTypeEnum = {
    Like: 'LIKE',
    Request: 'REQUEST',
    Block: 'BLOCK'
} as const;
export type NotificationDtoTypeEnum = typeof NotificationDtoTypeEnum[keyof typeof NotificationDtoTypeEnum];


/**
 * Check if a given object implements the NotificationDto interface.
 */
export function instanceOfNotificationDto(value: object): value is NotificationDto {
    return true;
}

export function NotificationDtoFromJSON(json: any): NotificationDto {
    return NotificationDtoFromJSONTyped(json, false);
}

export function NotificationDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): NotificationDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'senderId': json['senderId'] == null ? undefined : json['senderId'],
        'receiverId': json['receiverId'] == null ? undefined : json['receiverId'],
        'type': json['type'] == null ? undefined : json['type'],
        'message': json['message'] == null ? undefined : json['message'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'read': json['read'] == null ? undefined : json['read'],
        'deleted': json['deleted'] == null ? undefined : json['deleted'],
    };
}

export function NotificationDtoToJSON(json: any): NotificationDto {
    return NotificationDtoToJSONTyped(json, false);
}

export function NotificationDtoToJSONTyped(value?: NotificationDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'senderId': value['senderId'],
        'receiverId': value['receiverId'],
        'type': value['type'],
        'message': value['message'],
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'read': value['read'],
        'deleted': value['deleted'],
    };
}

