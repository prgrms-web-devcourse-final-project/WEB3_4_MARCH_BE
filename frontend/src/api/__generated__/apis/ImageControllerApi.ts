/* tslint:disable */
/* eslint-disable */
/**
 * 4차 프로젝트 6팀 March API
 * 6팀 March의 백엔드 API 명세서입니다.
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddImagesRequest,
  GenericResponseImageResponseDto,
  GenericResponseListImageResponseDto,
  GenericResponseString,
} from '../models/index';
import {
    AddImagesRequestFromJSON,
    AddImagesRequestToJSON,
    GenericResponseImageResponseDtoFromJSON,
    GenericResponseImageResponseDtoToJSON,
    GenericResponseListImageResponseDtoFromJSON,
    GenericResponseListImageResponseDtoToJSON,
    GenericResponseStringFromJSON,
    GenericResponseStringToJSON,
} from '../models/index';

export interface AddImagesOperationRequest {
    memberId: number;
    addImagesRequest?: AddImagesRequest;
}

export interface DeleteImageRequest {
    memberId: number;
    imageId: number;
}

export interface GetImagesByMemberRequest {
    memberId: number;
}

export interface SetPrimaryImageRequest {
    memberId: number;
    imageId: number;
}

/**
 * 
 */
export class ImageControllerApi extends runtime.BaseAPI {

    /**
     */
    async addImagesRaw(requestParameters: AddImagesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenericResponseString>> {
        if (requestParameters['memberId'] == null) {
            throw new runtime.RequiredError(
                'memberId',
                'Required parameter "memberId" was null or undefined when calling addImages().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("kakaoOAuth", []);
        }

        const response = await this.request({
            path: `/api/images/{memberId}`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters['memberId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddImagesRequestToJSON(requestParameters['addImagesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenericResponseStringFromJSON(jsonValue));
    }

    /**
     */
    async addImages(requestParameters: AddImagesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenericResponseString> {
        const response = await this.addImagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteImageRaw(requestParameters: DeleteImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenericResponseString>> {
        if (requestParameters['memberId'] == null) {
            throw new runtime.RequiredError(
                'memberId',
                'Required parameter "memberId" was null or undefined when calling deleteImage().'
            );
        }

        if (requestParameters['imageId'] == null) {
            throw new runtime.RequiredError(
                'imageId',
                'Required parameter "imageId" was null or undefined when calling deleteImage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("kakaoOAuth", []);
        }

        const response = await this.request({
            path: `/api/images/{memberId}/delete/{imageId}`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters['memberId']))).replace(`{${"imageId"}}`, encodeURIComponent(String(requestParameters['imageId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenericResponseStringFromJSON(jsonValue));
    }

    /**
     */
    async deleteImage(requestParameters: DeleteImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenericResponseString> {
        const response = await this.deleteImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getImagesByMemberRaw(requestParameters: GetImagesByMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenericResponseListImageResponseDto>> {
        if (requestParameters['memberId'] == null) {
            throw new runtime.RequiredError(
                'memberId',
                'Required parameter "memberId" was null or undefined when calling getImagesByMember().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("kakaoOAuth", []);
        }

        const response = await this.request({
            path: `/api/images/{memberId}`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters['memberId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenericResponseListImageResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async getImagesByMember(requestParameters: GetImagesByMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenericResponseListImageResponseDto> {
        const response = await this.getImagesByMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async setPrimaryImageRaw(requestParameters: SetPrimaryImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenericResponseImageResponseDto>> {
        if (requestParameters['memberId'] == null) {
            throw new runtime.RequiredError(
                'memberId',
                'Required parameter "memberId" was null or undefined when calling setPrimaryImage().'
            );
        }

        if (requestParameters['imageId'] == null) {
            throw new runtime.RequiredError(
                'imageId',
                'Required parameter "imageId" was null or undefined when calling setPrimaryImage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("kakaoOAuth", []);
        }

        const response = await this.request({
            path: `/api/images/{memberId}/primary/{imageId}`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters['memberId']))).replace(`{${"imageId"}}`, encodeURIComponent(String(requestParameters['imageId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenericResponseImageResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async setPrimaryImage(requestParameters: SetPrimaryImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenericResponseImageResponseDto> {
        const response = await this.setPrimaryImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
