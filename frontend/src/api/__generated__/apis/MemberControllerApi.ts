/* tslint:disable */
/* eslint-disable */
/**
 * 4차 프로젝트 6팀 March API
 * 6팀 March의 백엔드 API 명세서입니다.
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GenericResponseBoolean,
  GenericResponseListMemberInfoDto,
  GenericResponseMemberInfoDto,
  GenericResponseMemberRegisterResponseDto,
  GenericResponseMemberResponseDto,
  MemberModifyRequestDto,
  RegisterMemberRequest,
} from '../models/index';
import {
    GenericResponseBooleanFromJSON,
    GenericResponseBooleanToJSON,
    GenericResponseListMemberInfoDtoFromJSON,
    GenericResponseListMemberInfoDtoToJSON,
    GenericResponseMemberInfoDtoFromJSON,
    GenericResponseMemberInfoDtoToJSON,
    GenericResponseMemberRegisterResponseDtoFromJSON,
    GenericResponseMemberRegisterResponseDtoToJSON,
    GenericResponseMemberResponseDtoFromJSON,
    GenericResponseMemberResponseDtoToJSON,
    MemberModifyRequestDtoFromJSON,
    MemberModifyRequestDtoToJSON,
    RegisterMemberRequestFromJSON,
    RegisterMemberRequestToJSON,
} from '../models/index';

export interface CheckNicknameRequest {
    nickname: string;
}

export interface GetMemberInfoRequest {
    memberId: number;
}

export interface ModifyRequest {
    id: number;
    member: MemberModifyRequestDto;
    keepImageId: string;
    newImages?: Array<Blob>;
}

export interface RegisterMemberOperationRequest {
    registerMemberRequest?: RegisterMemberRequest;
}

export interface SearchMembersByNicknameRequest {
    nickname: string;
}

export interface UpdateLocationRequest {
    memberId: number;
    latitude: number;
    longitude: number;
}

export interface WithdrawMemberRequest {
    memberId: number;
}

/**
 * 
 */
export class MemberControllerApi extends runtime.BaseAPI {

    /**
     */
    async checkNicknameRaw(requestParameters: CheckNicknameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenericResponseBoolean>> {
        if (requestParameters['nickname'] == null) {
            throw new runtime.RequiredError(
                'nickname',
                'Required parameter "nickname" was null or undefined when calling checkNickname().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['nickname'] != null) {
            queryParameters['nickname'] = requestParameters['nickname'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("kakaoOAuth", []);
        }

        const response = await this.request({
            path: `/api/members/check-nickname`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenericResponseBooleanFromJSON(jsonValue));
    }

    /**
     */
    async checkNickname(requestParameters: CheckNicknameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenericResponseBoolean> {
        const response = await this.checkNicknameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getMemberInfoRaw(requestParameters: GetMemberInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenericResponseMemberInfoDto>> {
        if (requestParameters['memberId'] == null) {
            throw new runtime.RequiredError(
                'memberId',
                'Required parameter "memberId" was null or undefined when calling getMemberInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("kakaoOAuth", []);
        }

        const response = await this.request({
            path: `/api/members/{memberId}`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters['memberId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenericResponseMemberInfoDtoFromJSON(jsonValue));
    }

    /**
     */
    async getMemberInfo(requestParameters: GetMemberInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenericResponseMemberInfoDto> {
        const response = await this.getMemberInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async modifyRaw(requestParameters: ModifyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenericResponseMemberResponseDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling modify().'
            );
        }

        if (requestParameters['member'] == null) {
            throw new runtime.RequiredError(
                'member',
                'Required parameter "member" was null or undefined when calling modify().'
            );
        }

        if (requestParameters['keepImageId'] == null) {
            throw new runtime.RequiredError(
                'keepImageId',
                'Required parameter "keepImageId" was null or undefined when calling modify().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("kakaoOAuth", []);
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['member'] != null) {
            formParams.append('member', new Blob([JSON.stringify(MemberModifyRequestDtoToJSON(requestParameters['member']))], { type: "application/json", }));
                    }

        if (requestParameters['keepImageId'] != null) {
            formParams.append('keepImageId', requestParameters['keepImageId'] as any);
        }

        if (requestParameters['newImages'] != null) {
            requestParameters['newImages'].forEach((element) => {
                formParams.append('newImages', element as any);
            })
        }

        const response = await this.request({
            path: `/api/members/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenericResponseMemberResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async modify(requestParameters: ModifyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenericResponseMemberResponseDto> {
        const response = await this.modifyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async registerMemberRaw(requestParameters: RegisterMemberOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenericResponseMemberRegisterResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("kakaoOAuth", []);
        }

        const response = await this.request({
            path: `/api/members/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterMemberRequestToJSON(requestParameters['registerMemberRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenericResponseMemberRegisterResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async registerMember(requestParameters: RegisterMemberOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenericResponseMemberRegisterResponseDto> {
        const response = await this.registerMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async searchMembersByNicknameRaw(requestParameters: SearchMembersByNicknameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenericResponseListMemberInfoDto>> {
        if (requestParameters['nickname'] == null) {
            throw new runtime.RequiredError(
                'nickname',
                'Required parameter "nickname" was null or undefined when calling searchMembersByNickname().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['nickname'] != null) {
            queryParameters['nickname'] = requestParameters['nickname'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("kakaoOAuth", []);
        }

        const response = await this.request({
            path: `/api/members/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenericResponseListMemberInfoDtoFromJSON(jsonValue));
    }

    /**
     */
    async searchMembersByNickname(requestParameters: SearchMembersByNicknameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenericResponseListMemberInfoDto> {
        const response = await this.searchMembersByNicknameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateLocationRaw(requestParameters: UpdateLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenericResponseMemberResponseDto>> {
        if (requestParameters['memberId'] == null) {
            throw new runtime.RequiredError(
                'memberId',
                'Required parameter "memberId" was null or undefined when calling updateLocation().'
            );
        }

        if (requestParameters['latitude'] == null) {
            throw new runtime.RequiredError(
                'latitude',
                'Required parameter "latitude" was null or undefined when calling updateLocation().'
            );
        }

        if (requestParameters['longitude'] == null) {
            throw new runtime.RequiredError(
                'longitude',
                'Required parameter "longitude" was null or undefined when calling updateLocation().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['latitude'] != null) {
            queryParameters['latitude'] = requestParameters['latitude'];
        }

        if (requestParameters['longitude'] != null) {
            queryParameters['longitude'] = requestParameters['longitude'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("kakaoOAuth", []);
        }

        const response = await this.request({
            path: `/api/members/{memberId}/location`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters['memberId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenericResponseMemberResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async updateLocation(requestParameters: UpdateLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenericResponseMemberResponseDto> {
        const response = await this.updateLocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async withdrawMemberRaw(requestParameters: WithdrawMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenericResponseMemberResponseDto>> {
        if (requestParameters['memberId'] == null) {
            throw new runtime.RequiredError(
                'memberId',
                'Required parameter "memberId" was null or undefined when calling withdrawMember().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("kakaoOAuth", []);
        }

        const response = await this.request({
            path: `/api/members/{memberId}`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters['memberId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenericResponseMemberResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async withdrawMember(requestParameters: WithdrawMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenericResponseMemberResponseDto> {
        const response = await this.withdrawMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
