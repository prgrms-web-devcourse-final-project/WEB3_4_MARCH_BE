/* tslint:disable */
/* eslint-disable */
/**
 * 4차 프로젝트 6팀 March API
 * 6팀 March의 백엔드 API 명세서입니다.
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GenericResponseListNotificationDto,
  GenericResponseString,
} from '../models/index';
import {
    GenericResponseListNotificationDtoFromJSON,
    GenericResponseListNotificationDtoToJSON,
    GenericResponseStringFromJSON,
    GenericResponseStringToJSON,
} from '../models/index';

export interface DeleteAllNotificationsRequest {
    memberId: number;
}

export interface GetNotificationsRequest {
    memberId: number;
}

export interface MarkAllAsReadRequest {
    memberId: number;
}

export interface MarkAsReadRequest {
    memberId: number;
    notificationId: number;
}

export interface SoftDeleteNotificationRequest {
    memberId: number;
    notificationId: number;
}

/**
 * 
 */
export class NotificationControllerApi extends runtime.BaseAPI {

    /**
     */
    async deleteAllNotificationsRaw(requestParameters: DeleteAllNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenericResponseString>> {
        if (requestParameters['memberId'] == null) {
            throw new runtime.RequiredError(
                'memberId',
                'Required parameter "memberId" was null or undefined when calling deleteAllNotifications().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("kakaoOAuth", []);
        }

        const response = await this.request({
            path: `/api/notifications/{member_id}/delete-all`.replace(`{${"member_id"}}`, encodeURIComponent(String(requestParameters['memberId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenericResponseStringFromJSON(jsonValue));
    }

    /**
     */
    async deleteAllNotifications(requestParameters: DeleteAllNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenericResponseString> {
        const response = await this.deleteAllNotificationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getNotificationsRaw(requestParameters: GetNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenericResponseListNotificationDto>> {
        if (requestParameters['memberId'] == null) {
            throw new runtime.RequiredError(
                'memberId',
                'Required parameter "memberId" was null or undefined when calling getNotifications().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("kakaoOAuth", []);
        }

        const response = await this.request({
            path: `/api/notifications/{member_id}`.replace(`{${"member_id"}}`, encodeURIComponent(String(requestParameters['memberId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenericResponseListNotificationDtoFromJSON(jsonValue));
    }

    /**
     */
    async getNotifications(requestParameters: GetNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenericResponseListNotificationDto> {
        const response = await this.getNotificationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async markAllAsReadRaw(requestParameters: MarkAllAsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenericResponseString>> {
        if (requestParameters['memberId'] == null) {
            throw new runtime.RequiredError(
                'memberId',
                'Required parameter "memberId" was null or undefined when calling markAllAsRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("kakaoOAuth", []);
        }

        const response = await this.request({
            path: `/api/notifications/{member_id}/read-all`.replace(`{${"member_id"}}`, encodeURIComponent(String(requestParameters['memberId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenericResponseStringFromJSON(jsonValue));
    }

    /**
     */
    async markAllAsRead(requestParameters: MarkAllAsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenericResponseString> {
        const response = await this.markAllAsReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async markAsReadRaw(requestParameters: MarkAsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenericResponseString>> {
        if (requestParameters['memberId'] == null) {
            throw new runtime.RequiredError(
                'memberId',
                'Required parameter "memberId" was null or undefined when calling markAsRead().'
            );
        }

        if (requestParameters['notificationId'] == null) {
            throw new runtime.RequiredError(
                'notificationId',
                'Required parameter "notificationId" was null or undefined when calling markAsRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("kakaoOAuth", []);
        }

        const response = await this.request({
            path: `/api/notifications/{member_id}/read/{notification_Id}`.replace(`{${"member_id"}}`, encodeURIComponent(String(requestParameters['memberId']))).replace(`{${"notification_Id"}}`, encodeURIComponent(String(requestParameters['notificationId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenericResponseStringFromJSON(jsonValue));
    }

    /**
     */
    async markAsRead(requestParameters: MarkAsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenericResponseString> {
        const response = await this.markAsReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async softDeleteNotificationRaw(requestParameters: SoftDeleteNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenericResponseString>> {
        if (requestParameters['memberId'] == null) {
            throw new runtime.RequiredError(
                'memberId',
                'Required parameter "memberId" was null or undefined when calling softDeleteNotification().'
            );
        }

        if (requestParameters['notificationId'] == null) {
            throw new runtime.RequiredError(
                'notificationId',
                'Required parameter "notificationId" was null or undefined when calling softDeleteNotification().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("kakaoOAuth", []);
        }

        const response = await this.request({
            path: `/api/notifications/{member_id}/delete/{notification_Id}`.replace(`{${"member_id"}}`, encodeURIComponent(String(requestParameters['memberId']))).replace(`{${"notification_Id"}}`, encodeURIComponent(String(requestParameters['notificationId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenericResponseStringFromJSON(jsonValue));
    }

    /**
     */
    async softDeleteNotification(requestParameters: SoftDeleteNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenericResponseString> {
        const response = await this.softDeleteNotificationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
