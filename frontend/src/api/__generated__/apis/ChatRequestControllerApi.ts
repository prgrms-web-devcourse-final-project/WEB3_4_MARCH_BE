/* tslint:disable */
/* eslint-disable */
/**
 * 4차 프로젝트 6팀 March API
 * 6팀 March의 백엔드 API 명세서입니다.
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GenericResponseListChatRequestDto,
  GenericResponseVoid,
} from '../models/index';
import {
    GenericResponseListChatRequestDtoFromJSON,
    GenericResponseListChatRequestDtoToJSON,
    GenericResponseVoidFromJSON,
    GenericResponseVoidToJSON,
} from '../models/index';

export interface RespondRequest {
    requestId: number;
    accept: boolean;
}

export interface SendRequestRequest {
    receiverId: number;
}

/**
 * 
 */
export class ChatRequestControllerApi extends runtime.BaseAPI {

    /**
     */
    async getReceivedRequestsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenericResponseListChatRequestDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("kakaoOAuth", []);
        }

        const response = await this.request({
            path: `/api/chat-request/received-list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenericResponseListChatRequestDtoFromJSON(jsonValue));
    }

    /**
     */
    async getReceivedRequests(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenericResponseListChatRequestDto> {
        const response = await this.getReceivedRequestsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getSentRequestsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenericResponseListChatRequestDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("kakaoOAuth", []);
        }

        const response = await this.request({
            path: `/api/chat-request/sent-list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenericResponseListChatRequestDtoFromJSON(jsonValue));
    }

    /**
     */
    async getSentRequests(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenericResponseListChatRequestDto> {
        const response = await this.getSentRequestsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async respondRaw(requestParameters: RespondRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenericResponseVoid>> {
        if (requestParameters['requestId'] == null) {
            throw new runtime.RequiredError(
                'requestId',
                'Required parameter "requestId" was null or undefined when calling respond().'
            );
        }

        if (requestParameters['accept'] == null) {
            throw new runtime.RequiredError(
                'accept',
                'Required parameter "accept" was null or undefined when calling respond().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['accept'] != null) {
            queryParameters['accept'] = requestParameters['accept'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("kakaoOAuth", []);
        }

        const response = await this.request({
            path: `/api/chat-request/respond/{requestId}`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters['requestId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenericResponseVoidFromJSON(jsonValue));
    }

    /**
     */
    async respond(requestParameters: RespondRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenericResponseVoid> {
        const response = await this.respondRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async sendRequestRaw(requestParameters: SendRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenericResponseVoid>> {
        if (requestParameters['receiverId'] == null) {
            throw new runtime.RequiredError(
                'receiverId',
                'Required parameter "receiverId" was null or undefined when calling sendRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("kakaoOAuth", []);
        }

        const response = await this.request({
            path: `/api/chat-request/{receiverId}`.replace(`{${"receiverId"}}`, encodeURIComponent(String(requestParameters['receiverId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenericResponseVoidFromJSON(jsonValue));
    }

    /**
     */
    async sendRequest(requestParameters: SendRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenericResponseVoid> {
        const response = await this.sendRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
