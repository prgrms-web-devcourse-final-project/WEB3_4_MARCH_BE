/* tslint:disable */
/* eslint-disable */
/**
 * 4차 프로젝트 6팀 March API
 * 6팀 March의 백엔드 API 명세서입니다.
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LikeMemberProfileDto,
} from '../models/index';
import {
    LikeMemberProfileDtoFromJSON,
    LikeMemberProfileDtoToJSON,
} from '../models/index';

export interface GetLikedProfilesBySenderRequest {
    senderId: number;
}

export interface GetLikerProfilesByReceiverRequest {
    receiverId: number;
}

export interface LikeProfileRequest {
    senderId: number;
    receiverId: number;
}

/**
 * 
 */
export class LikeControllerApi extends runtime.BaseAPI {

    /**
     */
    async getLikedProfilesBySenderRaw(requestParameters: GetLikedProfilesBySenderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LikeMemberProfileDto>>> {
        if (requestParameters['senderId'] == null) {
            throw new runtime.RequiredError(
                'senderId',
                'Required parameter "senderId" was null or undefined when calling getLikedProfilesBySender().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['senderId'] != null) {
            queryParameters['senderId'] = requestParameters['senderId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("kakaoOAuth", []);
        }

        const response = await this.request({
            path: `/api/likes/ILikeU`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LikeMemberProfileDtoFromJSON));
    }

    /**
     */
    async getLikedProfilesBySender(requestParameters: GetLikedProfilesBySenderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LikeMemberProfileDto>> {
        const response = await this.getLikedProfilesBySenderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getLikerProfilesByReceiverRaw(requestParameters: GetLikerProfilesByReceiverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LikeMemberProfileDto>>> {
        if (requestParameters['receiverId'] == null) {
            throw new runtime.RequiredError(
                'receiverId',
                'Required parameter "receiverId" was null or undefined when calling getLikerProfilesByReceiver().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['receiverId'] != null) {
            queryParameters['receiverId'] = requestParameters['receiverId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("kakaoOAuth", []);
        }

        const response = await this.request({
            path: `/api/likes/ULikeMe`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LikeMemberProfileDtoFromJSON));
    }

    /**
     */
    async getLikerProfilesByReceiver(requestParameters: GetLikerProfilesByReceiverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LikeMemberProfileDto>> {
        const response = await this.getLikerProfilesByReceiverRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async likeProfileRaw(requestParameters: LikeProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['senderId'] == null) {
            throw new runtime.RequiredError(
                'senderId',
                'Required parameter "senderId" was null or undefined when calling likeProfile().'
            );
        }

        if (requestParameters['receiverId'] == null) {
            throw new runtime.RequiredError(
                'receiverId',
                'Required parameter "receiverId" was null or undefined when calling likeProfile().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['senderId'] != null) {
            queryParameters['senderId'] = requestParameters['senderId'];
        }

        if (requestParameters['receiverId'] != null) {
            queryParameters['receiverId'] = requestParameters['receiverId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("kakaoOAuth", []);
        }

        const response = await this.request({
            path: `/api/likes/profile`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async likeProfile(requestParameters: LikeProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.likeProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
