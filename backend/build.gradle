plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.team6'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.1' // swagger
    implementation 'mysql:mysql-connector-java:8.0.33' // mysql
    implementation 'org.springframework.boot:spring-boot-starter-webflux' // WebClient:  비동기식 HTTP 요청을 처리하기 위해 사용
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    implementation 'org.springframework:spring-context'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2', 'io.jsonwebtoken:jjwt-jackson:0.11.2'

    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'io.lettuce:lettuce-core' //// 기본 Redis 클라이언트
    implementation("io.awspring.cloud:spring-cloud-aws-starter-s3:3.3.0")

    // WebSocket + STOMP
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    // Kafka
    implementation 'org.springframework.kafka:spring-kafka'

    // JSON 변환
    implementation 'com.fasterxml.jackson.core:jackson-databind'

    // Netty 추가 (lettuce 내부에서 사용하는데 명시적으로 추가하면 안정적)
    implementation 'io.netty:netty-all:4.1.100.Final'

    implementation platform("software.amazon.awssdk:bom:2.25.28") // BOM으로 관리
    implementation 'software.amazon.awssdk:s3'
    implementation 'software.amazon.awssdk:auth'
    implementation 'software.amazon.awssdk:regions'

    // Spring Security Messaging 의존성
    implementation 'org.springframework.security:spring-security-messaging:'

    // Spring Retry (재시도 로직 적용)
    implementation 'org.springframework.retry:spring-retry'

    // Spring AOP (재시도 로직 등 관점지향 프로그래밍 지원)
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    // Spring Boot Actuator (헬스체크 및 모니터링)
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    implementation 'org.apache.tika:tika-core:2.9.1'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'commons-fileupload:commons-fileupload:1.5'

    runtimeOnly 'mysql:mysql-connector-java:8.0.33'
}

tasks.named('test') {
    useJUnitPlatform()
}